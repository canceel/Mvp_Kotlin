apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android-extensions'
android {
    signingConfigs {
        key {
            keyAlias rootProject.ext.signingConfig.KEY_ALIAS
            keyPassword rootProject.ext.signingConfig.KEY_PASSWORD
            storeFile file(rootProject.ext.signingConfig.KEY_FILE)
            storePassword rootProject.ext.signingConfig.KEY_STORE_PASSWORD
        }
    }

    buildTypes {
        debug {
            buildConfigField "boolean", "LOG_DEBUG", "true"
            buildConfigField "boolean", "USE_CANARY", "true"
            signingConfig signingConfigs.key
            debuggable true
        }
        release {
            buildConfigField "boolean", "LOG_DEBUG", "false"
            buildConfigField "boolean", "USE_CANARY", "false"
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            debuggable false
            signingConfig signingConfigs.key
            jniDebuggable false
            renderscriptDebuggable false
            applicationVariants.all { variant ->
                variant.outputs.each { output ->
                    def date = new Date();
                    def formattedDate = date.format('yyyyMMdd')
                    output.outputFile = new File(output.outputFile.parent,
                            output.outputFile.name.replace("-release", "-v" + defaultConfig.versionName + "-" + formattedDate + "-release"))
                }
            }
        }
    }

    //此处添加渠道，gradle会自动打包
    productFlavors {
        //官网渠道
        Guanwang {}
    }

    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion
    defaultConfig {
        multiDexEnabled true
        applicationId "com.shenme.mvp_kotlin"
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        renderscriptTargetApi 25
        renderscriptSupportModeEnabled true    // Enable RS support
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}
kapt {
    generateStubs = true
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    //support
    compile rootProject.ext.dependencies["multidex"]
    compile(rootProject.ext.dependencies["kotlin"])
    compile(rootProject.ext.dependencies["test_espresso"]) {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    compile(rootProject.ext.dependencies["anko"])
    //view
    compile(rootProject.ext.dependencies["recyclerview-v7"])
    compile(rootProject.ext.dependencies["constraint-layout"])
    compile(rootProject.ext.dependencies["realtimeblurview"])
    //net
    compile(rootProject.ext.dependencies["retrofit2"])
    compile(rootProject.ext.dependencies["retrofit2-adapter-rxjava2"])
    compile(rootProject.ext.dependencies["retrofit-converter-gson"])
    compile(rootProject.ext.dependencies["okhttp3"])
    compile(rootProject.ext.dependencies["okhttp3_logging"])
    compile(rootProject.ext.dependencies["glide"])
    //tools
    compile rootProject.ext.dependencies["dagger2"]
    kapt rootProject.ext.dependencies["dagger2-compiler"]
    compile(rootProject.ext.dependencies["androideventbus"])
    compile(rootProject.ext.dependencies["timber"])
    compile(rootProject.ext.dependencies["SmartRefreshLayout"])
    compile(rootProject.ext.dependencies["SmartRefreshHeader"])
    compile(rootProject.ext.dependencies["rxpermissions2"])
    compile project(':swipebacklayout')
}